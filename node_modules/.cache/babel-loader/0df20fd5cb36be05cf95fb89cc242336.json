{"ast":null,"code":"var _jsxFileName = \"/Users/edgardyr/Documents/Professional/react_frontend_sample/src/App.js\";\nimport React from 'react';\nimport logo from \"./levvel-logo.svg\";\nimport './App.css';\nimport resources from './data.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  author1,\n  author2,\n  author3,\n  author4\n} = resources; // const author1 = JSON.stringify(\n//   {\n//     \"userId\":1,\n//     \"title\":\"hello word\"\n//   }\n// );\n// const getData = async () => {\n//   try{\n//     const response = await fetch('https://jsonplaceholder.typicode.com/posts', {method: 'PATCH', body:author1,\n//   headers:{'Content-type': 'application/json; charset=UTF-8'}});\n//     if(response.ok){\n//       const jsonResponse = await response.json();\n//       console.log(jsonResponse);\n//     }\n//     throw new Error('Request failed!');\n//   }\n//   catch(error){\n//     console.log(error);\n//   }\n// }\n// getData();\n//  var data = [];\n//  fetch(\"https://jsonplaceholder.typicode.com/posts\")\n//      .then((res) => res.json())\n//      .then((json) => {\n//          data = json;\n//      })\n//  fetch(\"https://jsonplaceholder.typicode.com/users\")\n//      .then((res) => res.json())\n//      .then((json) => {\n//         const result = [];\n//         Object.assign(result, data, json)\n//         this.setState({\n//             items: result,\n//             DataisLoaded: true\n//         });\n//      })\n\nclass App extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"lol\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"App-link\",\n          href: \"https://reactjs.org\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"Learn React\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Display extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      DataisLoaded: false\n    };\n  } // ComponentDidMount is used to\n  // execute the code \n\n\n  async componentDidMount() {\n    if (this.props.name === \"Jessica\") {\n      await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n        method: 'POST',\n        body: author1,\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(res => res.json()).then(json => {\n        this.setState({\n          items: [json],\n          DataisLoaded: true\n        });\n      });\n    } else if (this.props.name === \"Alejandro\") {\n      await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n        method: 'POST',\n        body: author2,\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(res => res.json()).then(json => {\n        this.setState({\n          items: [json],\n          DataisLoaded: true\n        });\n      });\n    } else if (this.props.name === \"Eric\") {\n      await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n        method: 'POST',\n        body: author3,\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(res => res.json()).then(json => {\n        this.setState({\n          items: [json],\n          DataisLoaded: true\n        });\n      });\n    } else if (this.props.name === \"Vanessa\") {\n      await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n        method: 'POST',\n        body: author4,\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(res => res.json()).then(json => {\n        this.setState({\n          items: [json],\n          DataisLoaded: true\n        });\n      });\n    }\n\n    ;\n  }\n\n  render() {\n    const {\n      DataisLoaded,\n      items\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"Author\",\n        children: items.map(item => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          id: item.id,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.imgs[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              id: \"authName\",\n              href: \"./\" + item.name,\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this), item.posts[0]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nexport default Display;","map":{"version":3,"sources":["/Users/edgardyr/Documents/Professional/react_frontend_sample/src/App.js"],"names":["React","resources","author1","author2","author3","author4","App","Component","render","logo","Display","constructor","props","state","items","DataisLoaded","componentDidMount","name","fetch","method","body","headers","then","res","json","setState","map","item","id","imgs","posts"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './levvel-logo.svg';\nimport './App.css';\nimport resources from './data.js';\n\nconst {author1, author2, author3, author4} = resources;\n\n// const author1 = JSON.stringify(\n//   {\n//     \"userId\":1,\n//     \"title\":\"hello word\"\n//   }\n// );\n\n\n// const getData = async () => {\n//   try{\n//     const response = await fetch('https://jsonplaceholder.typicode.com/posts', {method: 'PATCH', body:author1,\n//   headers:{'Content-type': 'application/json; charset=UTF-8'}});\n//     if(response.ok){\n//       const jsonResponse = await response.json();\n//       console.log(jsonResponse);\n//     }\n//     throw new Error('Request failed!');\n//   }\n//   catch(error){\n//     console.log(error);\n//   }\n// }\n// getData();\n\n\n      //  var data = [];\n      //  fetch(\"https://jsonplaceholder.typicode.com/posts\")\n      //      .then((res) => res.json())\n      //      .then((json) => {\n      //          data = json;\n      //      })\n      //  fetch(\"https://jsonplaceholder.typicode.com/users\")\n      //      .then((res) => res.json())\n      //      .then((json) => {\n      //         const result = [];\n      //         Object.assign(result, data, json)\n      //         this.setState({\n      //             items: result,\n      //             DataisLoaded: true\n      //         });\n      //      })\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            lol\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">\n\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nclass Display extends React.Component { \n   constructor(props) {\n       super(props);\n  \n       this.state = {\n           items: [],\n           DataisLoaded: false\n       };\n   }\n  \n   // ComponentDidMount is used to\n   // execute the code \n   async componentDidMount() {\n\n      if(this.props.name===\"Jessica\"){\n        await fetch(\"https://jsonplaceholder.typicode.com/users\", {method: 'POST', body:author1, headers: {'Content-type': 'application/json; charset=UTF-8'}})\n          .then((res) => res.json())\n          .then((json) => {\n            this.setState({\n              items: [json],\n              DataisLoaded: true\n          })\n       })\n      }\n\n      else if(this.props.name===\"Alejandro\"){\n        await fetch(\"https://jsonplaceholder.typicode.com/users\", {method: 'POST', body:author2, headers: {'Content-type': 'application/json; charset=UTF-8'}})\n          .then((res) => res.json())\n          .then((json) => {\n            this.setState({\n              items: [json],\n              DataisLoaded: true\n            })\n          })\n        }\n\n      else if(this.props.name===\"Eric\"){\n          await fetch(\"https://jsonplaceholder.typicode.com/users\", {method: 'POST', body:author3, headers: {'Content-type': 'application/json; charset=UTF-8'}})\n          .then((res) => res.json())\n          .then((json) => {\n            this.setState({\n              items: [json],\n              DataisLoaded: true\n          })\n        })\n      }\n\n      else if(this.props.name===\"Vanessa\"){\n          await fetch(\"https://jsonplaceholder.typicode.com/users\", {method: 'POST', body:author4, headers: {'Content-type': 'application/json; charset=UTF-8'}})\n          .then((res) => res.json())\n          .then((json) => {\n            this.setState({\n              items: [json],\n              DataisLoaded: true\n            })\n          })\n        };\n   }\n   render() {\n       const { DataisLoaded, items } = this.state;\n  \n       return (\n       <div className = \"App\">\n         <header className = \"Author\">\n            {items.map((item) => (\n              <React.Fragment id = {item.id}>\n                <img src = {item.imgs[0]} />\n                <p>\n                  <a id=\"authName\" href={\"./\" + item.name}>\n                    {item.name}\n                  </a>\n                  <br/>\n                  {item.posts[0]}\n                </p>\n                <br/>\n              </React.Fragment>\n            ))}\n        </header>\n       </div>\n   );\n}\n}\n\nexport default Display;"]},"metadata":{},"sourceType":"module"}